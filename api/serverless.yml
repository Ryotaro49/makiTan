service: eitango
frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs20.x
  lambdaHashingVersion: 20201221
  logRetentionInDays: 30
  stage: prod
  region: ap-northeast-1
  httpApi:
    cors: true
    payload: '2.0'
  logs:
    httpApi: true
  environment:
    DYNAMODB_TABLE_REGION: ${aws:region}
    PHRASE_TABLE_NAME: ${self:service}-phrase
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-*"

  stackTags:
    SERVICE: ${self:service}-api
    APP: ${self:service}
    STAGE: ${sls:stage}

resources:
  Resources:
    PhraseTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:service}-phrase
        AttributeDefinitions:
          - AttributeName: "user_id"
            AttributeType: "S"
          - AttributeName: "category_phrase"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "user_id"
            KeyType: "HASH"
          - AttributeName: "category_phrase"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

package:
  patterns:
    - "!node_modules/**"
    - "!**"
    - package.json
    - "lib/**"
    - "handlers/**"
    - "types/**"
    - "*.js"


functions:
  listPhrase:
    handler: handlers/phrase.listPhraseHandler
    events:
      - httpApi:
          path: "/phrases"
          method: get

  registerPhrase:
    handler: handlers/phrase.registerPhraseHandler
    events:
      - httpApi:
          path: "/phrase"
          method: put

  deletePhrase:
    handler: handlers/phrase.deletePhraseHandler
    events:
      - httpApi:
          path: "/phrase"
          method: delete
